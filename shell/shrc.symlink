if [[ -n "${ZSH_VERSION:-}" ]]; then
  # don't put duplicate lines in the history. See bash(1) for more options
  # ... or force ignoredups and ignorespace
  HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
  HISTCONTROL=ignoredups:ignorespace

  SAVEHIST=5000
  HISTSIZE=2000


  # share history across multiple zsh sessions
  setopt SHARE_HISTORY
  # append to history
  setopt APPEND_HISTORY

  # adds commands as they are typed, not at shell exit
  setopt INC_APPEND_HISTORY

  # expire duplicates first
  setopt HIST_EXPIRE_DUPS_FIRST
  # do not store duplications
  setopt HIST_IGNORE_DUPS
  #ignore duplicates when searching
  setopt HIST_FIND_NO_DUPS
  # removes blank lines from history
  setopt HIST_REDUCE_BLANKS

  # User bash split word
  setopt shwordsplit

  # The following lines were added by compinstall
  #zstyle :compinstall filename '$HOME/.zshrc'
  # `compinit` scans $fpath, so do this before calling it.
  fpath=(~/.zsh/functions $fpath)
  autoload -Uz compinit && compinit
  autoload -U promptinit; promptinit
  prompt myprompt

  #
  bindkey "^[^[[C" forward-word
  bindkey "^[^[[D" backward-word

#  autoload -U select-word-style; select-word-style bash

  x-backward-kill-word(){
    WORDCHARS='`~!@#$%^&*()-_=+[{]}\|;:",<.>/?'"'" zle backward-kill-word
  }
  zle -N x-backward-kill-word
  bindkey '^D' x-backward-kill-word

  x-/-backward-kill-word(){
    WORDCHARS='`~!@#$%^&*()-_=+[{]}\|;:",<.>?'"'" zle backward-kill-word
  }
  zle -N x-/-backward-kill-word
  bindkey '^B' x-/-backward-kill-word

  x-bash-backward-kill-word(){
    WORDCHARS='' zle backward-kill-word
  }
  zle -N x-bash-backward-kill-word
  bindkey '^W' x-bash-backward-kill-word

  bindkey "^F" kill-word

  setopt appendhistory autocd extendedglob nomatch notify KSH_ARRAYS
  setopt INTERACTIVE_COMMENTS
  #bindkey -v
fi

if [[ -n "${BASH_VERSION:-}" ]]; then
  # ~/.bashrc: executed by bash(1) for non-login shells.
  # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
  # for examples

  # If not running interactively, don't do anything
  [ -z "$PS1" ] && return

  # don't put duplicate lines in the history. See bash(1) for more options
  # ... or force ignoredups and ignorespace
  HISTCONTROL=ignoredups:ignorespace

  # append to the history file, don't overwrite it
  shopt -s histappend

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=1000
  HISTFILESIZE=2000

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # set variable identifying the chroot you work in (used in the prompt below)
  if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
  fi

  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
    xterm-color) color_prompt=yes;;
  esac

  # uncomment for a colored prompt, if the terminal has the capability; turned
  # off by default to not distract the user: the focus in a terminal window
  # should be on the output of commands, not on the prompt
  force_color_prompt=yes

  if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
      # We have color support; assume it's compliant with Ecma-48
      # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
      # a case would tend to support setf rather than setaf.)
      color_prompt=yes
    else
      color_prompt=
    fi
  fi

  if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
  fi
  unset color_prompt force_color_prompt

  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
    xterm*|rxvt*)
      PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
      ;;
    *)
      ;;
  esac

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
  fi
fi

#
#Put custom code from HERE
#

GDATE='date'
FDATE='+%s'
if type gdate > /dev/null 2>&1; then
  GDATE='gdate'
  FDATEm='+%s.%N'
fi
b_tm=$($GDATE $FDATE)
export LC_ALL='en_US.UTF-8'

DOTFILES=$( cd "$( dirname "$( dirname "$( readlink -f "${BASH_SOURCE[0]:-$0}" )" )" )" && pwd )

#DOTFILES="$HOME/Software/_myDotfiles"
#if [[ $HOSTNAME =~ 'rcf.bnl.gov'$ ]] || [[ $HOSTNAME =~ 'sdcc.bnl.gov'$ ]]; then
#  DOTFILES="$HOME/dotfiles/"
if [[ $HOSTNAME =~ 'pn1714380.lanl.gov' ]]; then
#  DOTFILES="$HOME/dotfiles/"
  #some workaound for linux lanl machine
  unset SSH_ASKPASS
  if [[ -f '/etc/bash_completion.d/git' ]]; then
   source '/etc/bash_completion.d/git'
  fi
elif [[ -n "$_ALIDOCK_ENV" ]]; then
#  DOTFILES=${SINGULARITY_NAME+"${DOTFILES}"}
#  DOTFILES=${DOTFILES:="/mnt/Software/dotfiles/"}
  [ -n SINGULARITY_NAME ] && export SW_WORK_DIR="${HOME}/sPHENIX/Projects/01.MVTX/02.Testbeam/TB-2019_FTBF_4stave-telescope/sw"
elif [[ $HOSTNAME =~ ^'mvtx'[0-5] ]] || [[ "$HOSTNAME" =~ ^'test03' ]]; then
  [ -f /home/ycmorales/my-mvtx-tools/sh/extra_functions.sh ] && . /home/ycmorales/my-mvtx-tools/sh/extra_functions.sh
fi
export DOTFILES

# source all .shell files inside of the sh/ directory
for SHELL_FILE in $( ls -r $DOTFILES/shell/add_files/*.shell ); do
  source $SHELL_FILE;
  unset SHELL_FILE
done

#
# 'Til HERE
#
e_tm=$($GDATE $FDATE)
[[ $(echo "$( echo "$e_tm - $b_tm" | bc -l ) > 1" | bc) != 1 ]] || \
  echo "Shell initialization too slow, time higher than 2 sec."
